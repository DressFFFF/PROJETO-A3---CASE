# Importação de todas as classes e bibliotecas necessárias para o funcionamento ========
from datetime import datetime, date
import time
from Model.ClienteFinal import ClienteFinal
from Model.Estabelecimento import Estabelecimento
from Model.Pedido import Pedido
from Model.Produto import Produto
from Model.Database import Database



conexao = Database()

# Início do programa ===================================================================

if __name__ == "__main__":
    print('Bem-vindo ao Go! Food\n')
    time.sleep(2)

    while True:
        tipo_cadastro = input('''
O que deseja fazer?

[C] - Cadastro de usuário ou restaurante
[L] - Realizar o login
[S] - Para sair\n\n''').upper()

# Condição para encerrar o programa ====================================================

        if tipo_cadastro.upper() == 'S':
            conexao.fechar_conexao()
            break

# Condição para realizar o cadastro de usuário ou restaurante ==========================

        elif tipo_cadastro.upper() == 'C':
            tipo_cadastro = input('''
Menu de Cadastro

Escolha uma das opções:

[U] - Cadastro de usuário
[R] - Cadastro de um restaurante e produto
[B] - Voltar\n\n''').upper()

# Condição para realizar o cadastro de usuário =========================================

            if tipo_cadastro.upper() == 'U':                                  
                print('\nVamos criar sua conta!\n')

# Usuário realizar input do cpf para iniciar o cadastro ================================
              
                cpf = input('Digite seu CPF: ')

# Lógica que chama a função para validar o cpf ========================================

                while not ClienteFinal.validar_cpf(cpf):
                  print('\nCPF inválido! Por favor, digite um CPF válido.')
                  cpf = input('\nDigite seu CPF: ')

                while not ClienteFinal.validar_cpf(cpf):
                    print('\nCPF inválido! Por favor, digite um CPF válido.')
                    cpf = input('\nDigite seu CPF: ')

# Usuário realiza input do nome para continuar o cadastro ==============================

                nome = input('Digite seu nome completo: ')
                nome_validado = ClienteFinal.validar_nome(nome)

# Lógica que chama a função para validar o nome do usuário =============================

                while nome_validado is None:
                    print('\nNome inválido! Por favor, digite um nome válido.')
                    nome = input('\nDigite seu nome completo: ')
                    nome_validado = ClienteFinal.validar_nome(nome)

# Usuário realiza input do telefone para continuar o cadastro ==========================
              
                telefone = input('Digite seu telefone: ')

# Lógica que chama a função para validar o telefone do usuário =========================
              
                telefone_validado = ClienteFinal.validar_telefone(telefone)
                while telefone_validado is None:
                    print('\nTelefone inválido! Por favor, digite um telefone válido.')
                    telefone = input('\nDigite seu telefone: ')
                    telefone_validado = ClienteFinal.validar_telefone(telefone)

# Usuário realiza input do email para continuar o cadastro =============================

                email = input('Digite seu melhor e-mail: ')

# Lógica que chama a função para validar o e-mail do usuário ===========================
              
                email_validado = ClienteFinal.validar_email(email)
                while email_validado is None:
                    print('\nE-mail inválido! Por favor, digite um e-mail válido.')
                    email = input('\nDigite seu melhor e-mail: ')
                    email_validado = ClienteFinal.validar_email(email)

# Usuário realiza o input da data de nascimento para continuar o cadastro ==============
    
                dataNascimento = input('Digite sua data de nascimento: ')

# Lógica que chama a função para validar a data de nascimento do usuário ===============

                data_nascimento_validada = ClienteFinal.validar_data_nascimento(dataNascimento)
                while data_nascimento_validada is None:
                    print('\nData de nascimento inválida. Formato aceito: ano-mês-dia')
                    dataNascimento = input('\nDigite sua data de nascimento (ano-mês-dia): ')
                    data_nascimento_validada = ClienteFinal.validar_data_nascimento(dataNascimento)

# Usuário realiza o input do endereço para continuar o cadastro ========================
              
                endereco = input('Digite seu endereço: ')

# Lógica que chama a função para validar o endereço do usuário =========================
            
                endereco_validado = ClienteFinal.validar_endereco(endereco)
                while endereco_validado is None:
                    endereco = input('\nDigite seu endereço: ')
                    endereco_validado = ClienteFinal.validar_endereco(endereco)
                
                senha = input('Crie sua senha: ')
                
                pass
              
                usuario = ClienteFinal(cpf, nome, telefone, email, dataNascimento, endereco, senha)
                usuario.cadastrar_usuario(conexao)

# Condição para realizar o cadastro de um restaurante e produto =======================

            elif tipo_cadastro.upper() == 'R':
                print('\nVamos criar sua conta!\n')
                cnpj = input('Digite seu CNPJ: ')
                razaoSocial = input('Digite o nome do restaurante (Razão Social): ')
                email = input('Digite o seu melhor e-mail: ')
                telefone = input('Digite seu telefone: ')
                segmento = input('Digite o segmento do seu estabelecimento (Alimentício, Bebidas): ')
                endereco = input('Digite seu endereço: ')
                horarioAbertura = input('Digite o horário de abertura do estabelecimento: ')
                horarioFechamento = input('Digite o horário de fechamento do estabelecimento: ')
                senha = input('Crie sua senha: ')

                restaurante = Estabelecimento(cnpj, razaoSocial, email, telefone, segmento, endereco, horarioAbertura, horarioFechamento, senha)
                restaurante.cadastrar_estabelecimento(conexao)

# Continuação da condição R, seguindo para o cadastro do produto =======================

                time.sleep(1)
                while True:
                  print('''\nAgora vamos cadastrar o produto do estabelecimento!\n''')
                  descricao = input('Digite o nome do produto: ')
                  valorVenda = input('Digite o valor de venda: ')
                  quantidadeDisponivel = input('Digite a quantidade disponível no estoque: ')
                  unidadeMedida = input('Digite a unidade (un, ml): ')
                  fk_estabelecimento_cnpj = cnpj

                  pratos = Produto(descricao, valorVenda, quantidadeDisponivel, unidadeMedida, fk_estabelecimento_cnpj)
                  pratos.cadastrar_produto(conexao)

                  adicionar_outro = input('''
Deseja adicionar mais um?

[S] - Sim
[N] - Não\n\n''').upper()
                  if adicionar_outro.upper() != 'S':
                    break

# Lógica para seguir para o login do usuário ou do estabelecimento =====================
      
        elif tipo_cadastro.upper() == 'L':
            tipo_login = input('''
Para realizar o login,

Escolha uma das opções:

[U] - Usuário
[R] - Restaurante
[B] - Voltar\n\n''').upper()

# Lógica para que o usuário realize o login no sistema =================================
          
            if tipo_login == 'U':
                usuario = input('\nDigite seu e-mail: ')
                senha = input('Digite sua senha: ')

                cliente = ClienteFinal("", "", "", "", "", "", "")
                cliente.fazer_login(conexao, usuario, senha)
              
                tipo_usuario = cliente.verificar_tipo_usuario()

                if tipo_usuario == 'cliente':
                  visualizar_menu = input('''
Seja bem-vindo cliente!           

Escolha uma da opções:

[P] - Realizar um pedido
[V] - Visualizar pedidos
[S] - Sair do App
\n''').upper()

                  if visualizar_menu == 'P':

                  # Busca e exibe os estabelecimentos disponíveis para seleção
                    estabelecimentos, nomes_estabelecimentos = conexao.buscar_estabelecimentos()

                  # Solicita ao usuário que digite o nome do estabelecimento desejado
                    nome_estabelecimento = input("\nDigite o estabelecimento desejado: ")

                  # Encontra o CNPJ do estabelecimento selecionado
                    cnpj_estabelecimento_escolhido = None
                    for idx, nome in enumerate(nomes_estabelecimentos):
                        if nome == nome_estabelecimento:
                            cnpj_estabelecimento_escolhido = estabelecimentos[idx][0]

                  # Busca os produtos disponíveis no estabelecimento selecionado
                    produtos_estabelecimento = conexao.buscar_produtos_por_cnpj(cnpj_estabelecimento_escolhido)
                    print("\nProdutos Disponíveis:\n")
                    for produto in produtos_estabelecimento:
                        print(f"{produto[0]} - Valor: {produto[1]}")

                    valorTotal = 0.0
                    produtos_pedido = []

                  # Solicita ao usuário que selecione produtos para adicionar ao pedido
                    while True:
                        nome_produto = input("\nDigite o produto que deseja ou 'S' para sair: ")
                        if nome_produto.upper() == 'S':
                            break

                  # Verifica se o produto selecionado está disponível no estabelecimento
                        for produto in produtos_estabelecimento:
                            if nome_produto == produto[0]:
                                produtos_pedido.append(produto)
                                valorTotal += float(produto[1])

                        adicionar_outro = input('''
                  \nDeseja adicionar mais um produto?

                  [S] - Sim
                  [N] - Não
                  \n''').upper()
                        if adicionar_outro != 'S':
                            break

                  # Exibe o valor total do pedido para confirmação
                    print("\nValor Total do Pedido:", valorTotal)
                    confirmacao_pedido = input('''
                  \nDeseja confirmar o pedido?

                  [S] - Sim
                  [N] - Não
                  \n''').upper()

                  # Se a confirmação for 'S', cria o pedido e insere no banco de dados
                    if confirmacao_pedido == 'S':

                  # Coleta os nomes dos produtos escolhidos para o pedido
                      nomes_produtos = [produto[0] for produto in produtos_pedido]

                      valorTotal = float(valorTotal)

                  # Agrupa os nomes dos produtos em uma única string separada por vírgulas
                      produtos_juntos = ', '.join(nomes_produtos)

                  # Cria o pedido com os produtos e o valor total e insere no banco
                      pedido_finalizado = Pedido(nome_estabelecimento, produtos_juntos, valorTotal)
                      pedido_finalizado.inserir_pedido(conexao)
                    
                  # Status do pedido em andamento....  
                      print('\n Aguarde a confirmação do pedido.')
                      time.sleep(10)
                      print('\n Está em Andamento')
                      time.sleep(20)
                      print('\n Saiu para entrega')
                  
# Lógica para que o estabelecimento reaCize o login no sistema =========================

            if tipo_login == 'R':
              estabelecimento = input('\nDigite seu e-mail: ')
              senha = input('Digite sua senha: ')

              restaurante = Estabelecimento("", "", "", "", "", "", "", "", "")
              restaurante.fazer_login(conexao, estabelecimento, senha)

              tipo_estabelecimento = restaurante.verificar_tipo_estabelecimento()
              
              if tipo_estabelecimento == 'restaurante':
                visualizar_menu1 = input('''
Seja bem-vindo restaurante!

Escolha uma das opções:

[T] - Visualizar pedidos em andamento 
[A] - Visualizar pedidos entregues
''').upper()


                if visualizar_menu1 == 'T':
                
                  estabelecimento = restaurante.nome_estabelecimento_autenticado
                  pedidos_em_andamento = Pedido.buscar_pedidos_por_estabelecimento(conexao, estabelecimento)
                
                  if pedidos_em_andamento:
                      print("\nPedidos:")
                      for pedido_str, valor_total in pedidos_em_andamento:
                          print(f"\nPedido: {pedido_str} - Valor Total: {valor_total}")
                  else:
                      print("\nNão há pedidos para este estabelecimento.")
                elif visualizar_menu1 == 'S':
                  break
                else:
                   print("\nOpção inválida. Por favor, escolha uma opção válida.")


                if visualizar_menu1 == 'A':
                  pedidos_em_andamento = Pedido.buscar_pedidos_por_estabelecimento(conexao, estabelecimento)

                  if pedidos_em_andamento:
                      print("\nPedidos em andamento:")
                      for pedido_str, valor_total in pedidos_em_andamento:
                          try:
                              cursor = conexao.get_cursor()
                              cursor.execute("SELECT dataHorario FROM pedido WHERE estabelecimento = %s AND produto = %s AND valorTotal = %s;", (estabelecimento, pedido_str, valor_total))
                              resultado = cursor.fetchone()
                              hora_pedido = resultado[0] if resultado else datetime.now()

                              status_pedido = Pedido.calcular_status_pedido(tempo_limite_entrega=30, hora_pedido=hora_pedido)

                              print(f"\nPedido: {pedido_str} - Valor Total: {valor_total} - Status: {status_pedido}")
                          except Exception as e:
                              print(f"Erro ao buscar hora do pedido: {e}")
                  else:
                      print("\nNão há pedidos em andamento para este estabelecimento.")
            # elif visualizar_menu == 'S':
            #     break
            # else:
            #     print("\nOpção inválida. Por favor, escolha uma opção válida.")
        
