Principais mudanças:

Corrigi a comparação para aceitar 's' ou 'S' (maiúsculo ou minúsculo).
Converti a data de nascimento para string antes de validar, para evitar problemas de tipo.
Fiz algumas correções de formatação para tornar o código mais legível.

#  A expressão import re no início do código habilita o uso desse módulo. A biblioteca re permite trabalhar com expressões regulares, que são padrões de texto utilizados para buscar, encontrar ou manipular strings de maneira complexa.
================================================================================================================================================================

import re
import time

class Usuario:
    def __init__(self, nome_completo, data_nasc, cpf, endereco, telefone, email, senha):
        self.nome_completo = nome_completo
        self.data_nasc = int(data_nasc)
        self.cpf = cpf
        self.endereco = endereco
        self.telefone = telefone
        self.email = email
        self.senha = senha

    def validar_cpf(self, cpf):
        if not re.match(r'^\d{11}$', cpf) or len(set(cpf)) == 1:
            raise ValueError('CPF inválido.')

    def validar_email(self, email):
        if not re.match(r'^[\w\.-]+@[\w\.-]+\.\w+$', email):
            raise ValueError('E-mail inválido.')

    def validar_data_nasc(self, data_nasc):
        # Adicione lógica de validação de data de nascimento conforme necessário
        pass

    def salvar_dados_temporarios(self):
        self.validar_cpf(self.cpf)
        self.validar_email(self.email)
        self.validar_data_nasc(str(self.data_nasc))  # Converta para string antes de validar

        with open("usuario.txt", "w") as arquivo:
            arquivo.write(f"Nome Completo: {self.nome_completo}\n")
            arquivo.write(f"Data de Nascimento: {self.data_nasc}\n")
            arquivo.write(f"CPF: {self.cpf}\n")
            arquivo.write(f"Endereço: {self.endereco}\n")
            arquivo.write(f"Telefone: {self.telefone}\n")
            arquivo.write(f"E-mail: {self.email}\n")
            arquivo.write(f"Senha: {self.senha}\n")


class Pedido:
    def __init__(self, usuario, itens, endereco_entrega, forma_pagamento):
        self.usuario = usuario
        self.itens = itens
        self.endereco_entrega = endereco_entrega
        self.forma_pagamento = forma_pagamento
        self.status = "Pendente"

    def calcular_total(self):
        # Adicione lógica para calcular o total do pedido com base nos itens
        pass

    def confirmar_pedido(self):
        # Adicione lógica para confirmar o pedido (pode envolver interações com o sistema de pagamento, etc.)
        self.status = "Confirmado"
        print("Pedido confirmado!")


# Processo de login do usuário:
print('BEM VINDO AO GO! FOOD APP')
time.sleep(2)
acesso1 = input('Sua primeira vez aqui? Digite S. Já tem cadastro? Digite N: ')

if acesso1.upper() != 'N':
    print('Vamos criar sua conta!')
    usuario1 = Usuario(
        input('Digite seu nome completo: '),
        input('Digite sua data de nascimento (no formato DDMMYYYY): '),
        input('Digite seu CPF: '),
        input('Digite seu endereço: '),
        input('Digite seu telefone: '),
        input('Digite seu melhor e-mail: '),
        input('Crie sua senha: ')
    )

    usuario1.salvar_dados_temporarios()
    print('Cadastro concluído!')

# Processo de fazer pedidos:
print('FAÇA SEU PEDIDO')
acesso_pedido = input('Já possui cadastro? Digite S para fazer o pedido. Digite N para sair: ')

if acesso_pedido.upper() == 'S':
    itens_pedido = input('Digite os itens que deseja pedir (separados por vírgula): ').split(',')
    endereco_entrega_pedido = input('Digite o endereço de entrega: ')
    forma_pagamento_pedido = input('Digite a forma de pagamento: ')

    pedido_usuario = Pedido(usuario1, itens_pedido, endereco_entrega_pedido, forma_pagamento_pedido)

    total_pedido = pedido_usuario.calcular_total()
    print(f'Total do pedido: R$ {total_pedido:.2f}')

    pedido_usuario.confirmar_pedido()
